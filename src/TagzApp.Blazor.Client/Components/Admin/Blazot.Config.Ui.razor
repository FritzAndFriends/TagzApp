@using System.ComponentModel.DataAnnotations
@using System.Text.Json

<UiProviderConfig ProviderName="Blazot" Health="@_Health" ProviderIconCssClass="bi-blazot">
    <EditForm Model="_Model" OnValidSubmit="SaveConfigAsync">
        <AntiforgeryToken />
        <ValidationSummary />
        <dl>
            <dt><label for="ApiKey">Api Key:</label></dt>
            <dd>
                <InputText id="ApiKey" name="ApiKey" @bind-Value="_Model.ApiKey" placeholder="Api Key" />
                <ValidationMessage For="() => _Model.ApiKey" class="text-danger" />
            </dd>
            <dt><label for="SecretAuthKey">Secret Auth Key:</label></dt>
            <dd>
                <InputText id="SecretAuthKey" type="password" name="SecretAuthKey" @bind-Value="_Model.SecretAuthKey" placeholder="Secret Auth Key" />
                <ValidationMessage For="() => _Model.SecretAuthKey" class="text-danger" />
            </dd>
            <dt><label for="BaseAddress">Base Address:</label></dt>
            <dd>
                <InputText id="BaseAddress" name="BaseAddress" @bind-Value="_Model.BaseAddress" placeholder="Base Address of Mastodon Server" />
                <ValidationMessage For="() => _Model.BaseAddress" class="text-danger" />
            </dd>
            <dt><label for="Timeout">Timeout:</label></dt>
            <dd>
                <input id="Timeout" name="Timeout" @bind="_Model.Timeout" pattern="\d{2}:\d{2}:\d{2}" />
                <ValidationMessage For="() => _Model.Timeout" class="text-danger" />
            </dd>
            <dt>Default Headers:</dt>
            <dd>
                @* Generate a set of textboxes to collect values for the DefaultHeaders dictionary in ViewModel*@
                <InputDictionary Value="@_Model.DefaultHeaders" KeyCaption="Name" />

            </dd>
            <dt><label for="UseHttp2">UseHttp2:</label></dt>
            <dd>
                <InputCheckbox id="UseHttp2" name="UseHttp2" @bind-Value="_Model.UseHttp2" />
            </dd>
            <dt><label for="WindowRequests">Window Requests:</label></dt>
            <dd>
                <InputNumber id="WindowRequests" name="WindowRequests" @bind-Value="_Model.WindowRequests" />
                <ValidationMessage For="() => _Model.WindowRequests" class="text-danger" />
            </dd>
            <dt><label for="WindowSeconds">Window Seconds:</label></dt>
            <dd>
                <InputNumber id="WindowSeconds" name="WindowSeconds" @bind-Value="_Model.WindowSeconds" />
                <ValidationMessage For="() => _Model.WindowSeconds" class="text-danger" />
            </dd>
            <dt><label for="Enabled">Enabled:</label></dt>
            <dd>
                <InputCheckbox id="Enabled" name="Enabled" @bind-Value="_Model.Enabled" />
            </dd>
        </dl>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
</UiProviderConfig>

@code {
    [Inject] private ToastService ToastService { get; set; } = null!;
	[Parameter, EditorRequired] public ISocialMediaProvider Provider { get; set; } = null!;
	private (SocialMediaStatus Status, string Message) _Health = (SocialMediaStatus.Unknown, string.Empty);
	private ViewModel _Model = new();

	protected override async Task OnParametersSetAsync()
	{
		var providerConfiguration = await Provider.GetConfiguration(ConfigureTagzAppFactory.Current);
		var headers = providerConfiguration.GetConfigurationByKey("DefaultHeaders");
		var headerDictionary = JsonSerializer.Deserialize<Dictionary<string, string>>(headers) ?? new Dictionary<string, string>();
        int.TryParse(providerConfiguration.GetConfigurationByKey(nameof(_Model.WindowRequests)), out var windowRequests);
        int.TryParse(providerConfiguration.GetConfigurationByKey(nameof(_Model.WindowSeconds)), out var windowSeconds);

		_Model = new ViewModel
			{
				ApiKey = providerConfiguration.GetConfigurationByKey(nameof(_Model.ApiKey)),
				SecretAuthKey = providerConfiguration.GetConfigurationByKey(nameof(_Model.SecretAuthKey)),
				WindowRequests = windowRequests,
				WindowSeconds = windowSeconds,
				BaseAddress = providerConfiguration.GetConfigurationByKey(nameof(_Model.BaseAddress)),
				DefaultHeaders = headerDictionary,
				Timeout = TimeSpan.Parse(providerConfiguration.GetConfigurationByKey(nameof(_Model.Timeout))),
				UseHttp2 = !string.IsNullOrWhiteSpace(providerConfiguration.GetConfigurationByKey(nameof(_Model.UseHttp2))) && bool.Parse(providerConfiguration.GetConfigurationByKey(nameof(_Model.UseHttp2))),
				Enabled = !string.IsNullOrWhiteSpace(providerConfiguration.GetConfigurationByKey(nameof(_Model.Enabled))) && bool.Parse(providerConfiguration.GetConfigurationByKey(nameof(_Model.Enabled)))
			};

		_Health = await Provider.GetHealth();
        await InvokeAsync(StateHasChanged);

		await base.OnParametersSetAsync();
	}

	private async Task SaveConfigAsync()
	{
		var providerConfiguration = await Provider.GetConfiguration(ConfigureTagzAppFactory.Current);

		_Model.DefaultHeaders.Remove(string.Empty);

		providerConfiguration.SetConfigurationByKey(nameof(_Model.BaseAddress), _Model.BaseAddress);
		providerConfiguration.SetConfigurationByKey(nameof(_Model.ApiKey), _Model.ApiKey);
		providerConfiguration.SetConfigurationByKey(nameof(_Model.SecretAuthKey), _Model.SecretAuthKey);
		providerConfiguration.SetConfigurationByKey(nameof(_Model.WindowRequests), _Model.WindowRequests.ToString());
		providerConfiguration.SetConfigurationByKey(nameof(_Model.WindowSeconds), _Model.WindowSeconds.ToString());
		providerConfiguration.SetConfigurationByKey(nameof(_Model.Timeout), _Model.Timeout.ToString());
		providerConfiguration.SetConfigurationByKey(nameof(_Model.DefaultHeaders), JsonSerializer.Serialize(_Model.DefaultHeaders));
		providerConfiguration.SetConfigurationByKey(nameof(_Model.UseHttp2), _Model.UseHttp2.ToString());
		providerConfiguration.SetConfigurationByKey(nameof(_Model.Enabled), _Model.Enabled.ToString());

		await Provider.SaveConfiguration(ConfigureTagzAppFactory.Current, providerConfiguration);
		ToastService.Add($"Saved {providerConfiguration.Name} Configuration", MessageSeverity.Success);
	}

	public class ViewModel
	{
		// add properties for each of the fields you want to edit
        [Required] 
        public string ApiKey { get; set; } = string.Empty;

        [Required] 
        public string BaseAddress { get; set; } = string.Empty;

		public Dictionary<string, string> DefaultHeaders { get; set; } = new();

        [Required] 
        public string SecretAuthKey { get; set; } = string.Empty;

		[Required]
		public TimeSpan Timeout { get; set; }

		public bool UseHttp2 { get; set; }

		[Required]
		public int WindowSeconds { get; set; }

		[Required]
		public int WindowRequests { get; set; }

		public bool Enabled { get; set; }
	}
}
