@page "/Moderation"
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(policy: "Moderator")]
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net
@using TagzApp.ViewModels.Data
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Moderation</PageTitle>

<div class="row">
	<div class="col-md-12">
		<h1 class="text-center">Moderate Content for TagzApp (@_Tag)</h1>
	</div>
</div>

<div class="row" style="padding: 0  10px!important;">
	<div class="col-md-6 d-flex align-items-center" style="">
		<span class="col-form-label-sm">Current Moderators:</span>
		<span class="currentModerators">
			@foreach (var moderator in _Moderators)
			{
				<img id="moderator-@moderator.Email"
						 title="@moderator.DisplayName"
						 src="@moderator.AvatarImageSource" />
			}
		</span>
	</div>

	<div class="col-md-6 d-flex justify-content-end align-items-center">

		@* TODO: Add a badge with a number of currently blocked users *@
		<a class="link-danger me-3" title="Blocked Users" href="/BlockedUsers">
			<span id="blockedCount">
				@BlockedUserCount
			</span> <i class="bi bi-x-circle-fill"></i>
		</a>

		<label for="approved" style="text-wrap: nowrap; margin-right: 1.4em">Approval Status:</label>
		<select id="approved">
			<option value="-1">All</option>
			<option value="1">Approved Only</option>
			<option value="2">Rejected Only</option>
			<option value="0">Needs Review</option>
		</select>

		<label for="providers" class="px-2">Providers:</label>
		<div class="btn-group" role="group">

			@foreach (var provider in _Providers)
			{
				<input type="checkbox" class="btn-check" name="options" id="@provider.Id" checked autocomplete="off">
				<label title="@provider.Name" class="btn btn-outline-primary providerSwitch" for="@provider.Id"><i class="provider bi @WaterfallMessage.MapProviderToIcon(provider.Id)"></i></label>
			}

		</div>

	</div>

</div>
<div class="row" style="padding: 2px 10px!important">

	<div id="taggedContent" class="">

		@foreach (var content in _Content.Values.Reverse())
		{
			<ModerationMessage Content="content" OnModerate="Moderate" />
		}

	</div>

	<PauseButton @ref="ThePauseButton" />

	<div id="moderationAction" style="display: none;">
		<i class="bi bi-check2 approve" title="Approve this content"></i>
		<i class="bi bi-x-circle-fill reject" title="Reject this content"></i>
		<i class="bi bi-journal-text more" title="More Actions"></i>
	</div>

</div>

@*

	section Scripts {

		<script src="~/js/masonry.js" asp-append-version="true"></script>
		<script src="~/lib/sweetalert/dist/sweetalert.min.js"></script>
		<script>

			window.TagzApp.ListenForModerationContent("@Model.Tags.FirstOrDefault()");

			window.TagzApp.ActivateKeyboardNavigation();

			window.onload = window.Masonry.resizeAllGridItems();
			window.addEventListener("resize", Masonry.resizeAllGridItems);

			var providers = [];
			var switches = document.querySelectorAll(".providerSwitch");
			switches.forEach(function (sw) {
				var providerId = sw.getAttribute("for");
				var providerClass = window.TagzApp.MapProviderToIconClass(providerId);
				var icon = sw.querySelector(".provider");
				icon.classList.add(providerClass);
				providers.push(providerId);
				// add an event handler on the toggle of the checkbox to call AddProviderFilter or RemoveProviderFilter appropriately
				var checkbox = document.getElementById(providerId);
				checkbox.addEventListener("click", function (e) {
					var providerId = e.target.id;
					window.TagzApp.ToggleProviderFilter(providerId);
				});
			});
			window.TagzApp.InitializeProviderFilter(providers);

			var approved = document.getElementById("approved");
			approved.addEventListener("change", function (e) {
				var value = e.target.value;
				window.TagzApp.FilterByApprovalStatus(value);
			});

		</script>

	}
*@

@code {

	public int BlockedUserCount { get; set; } = 0;

	public PauseButton ThePauseButton { get; set; } = new();

	private SortedList<DateTimeOffset, TagzApp.ViewModels.Data.ModerationContentModel> _Content = new();

	private HashSet<dynamic> _PauseQueue = new();

	private HashSet<NewModerator> _Moderators = new();

	private IEnumerable<AvailableProvider> _Providers = Enumerable.Empty<AvailableProvider>();

	private HubConnection _Connection;

	string _Tag = string.Empty;

	protected override async Task OnInitializedAsync()
	{

		await ConfigureSignalRConnection();

		_Tag = (await _Connection.InvokeAsync<string[]>("GetTags"))?.First();


		BlockedUserCount = await _Connection.InvokeAsync<int>("GetBlockedUserCount");

		_Providers = await _Connection.InvokeAsync<IEnumerable<AvailableProvider>>("GetAvailableProviders");

		_Moderators = (await _Connection.InvokeAsync<NewModerator[]>("GetCurrentModerators")).ToHashSet();

		await base.OnInitializedAsync();

		await InitializeContent();

	}

	async Task ConfigureSignalRConnection()
	{

		_Connection = new HubConnectionBuilder()
						.WithUrl(NavigationManager.ToAbsoluteUri("/mod"))
					.Build();

		await ListenForModerationContent();

		await _Connection.StartAsync();

	}

	async Task ListenForModerationContent()
	{

		_Connection.On<ContentModel>("NewWaterfallMessage", async (content) =>
		{
			if (ThePauseButton.IsPaused)
			{
				_PauseQueue.Add(content);
				return;
			}

			_Content.Add(content.Timestamp, ModerationContentModel.ToModerationContentModel(content));
			await InvokeAsync(StateHasChanged);
		});

		_Connection.On<ModerationContentModel>("NewApprovedMessage", HandleApprovedMessage);

		_Connection.On<ModerationContentModel>("NewRejectedMessage", async (content) => {
			if (!ThePauseButton.IsPaused) {
				// TODO: Write this method
				//RejectMessage(content);
				await InvokeAsync(StateHasChanged);
			} else {

				var existing = _PauseQueue.FirstOrDefault(p => p is ContentModel && p.ProviderId == content.ProviderId);
				if (existing is not null)
				{
					_PauseQueue.Remove(existing);
				}

				_PauseQueue.Add(content);
			}
		});

		_Connection.On<int>("NewBlockedUserCount", async (newCount) => {
			BlockedUserCount = newCount;
			await InvokeAsync(StateHasChanged);
		});

		_Connection.On<NewModerator>("NewModerator", async (moderator) => {
			_Moderators.Add(moderator);
			await InvokeAsync(StateHasChanged);
		});

		_Connection.On<string>("RemoveModerator", async (moderatorEmail) => {
			var thisMod = _Moderators.FirstOrDefault(m => m.Email.Equals(moderatorEmail, StringComparison.InvariantCultureIgnoreCase));
			if (thisMod is not null)
			{
				_Moderators.Remove(thisMod);
				await InvokeAsync(StateHasChanged);
			}
		});

	}

	async Task HandleApprovedMessage(ModerationContentModel content)
	{
		if (!ThePauseButton.IsPaused)
		{
			// TODO: Approve the message
			//ApproveMessage(content);
			await InvokeAsync(StateHasChanged);
		}
		else
		{
			// Find item in the pauseQueue and set its state to ModerationState.Approved
			var existing = _PauseQueue.FirstOrDefault(p => p is ContentModel && p.ProviderId == content.ProviderId);
			if (existing is not null)
			{
				_PauseQueue.Remove(existing);
			}

			_PauseQueue.Add(content);

		}
	}

	async Task InitializeContent()
	{

		var currentContent = (await _Connection.InvokeAsync<IEnumerable<ModerationContentModel>>("GetFilteredContentByTag", _Tag, new string[] { "TWITCH" }, ""))
			.ToArray();

		foreach (var content in currentContent)
		{
			_Content.Add(content.Timestamp, content);
		}

	}

	async Task Moderate(ModerationAction action)
	{

		await _Connection.InvokeAsync("SetStatus", action.Provider, action.ProviderId, action.State);
		// TODO: Tag message appropriately to indicate moderation state
		
	}

	public async ValueTask DisposeAsync()
	{

		if (_Connection is not null)
		{
			await _Connection.DisposeAsync();
		}

	}

}
