@page "/Moderation"
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@attribute [Authorize(policy: "Moderator")]
@implements IAsyncDisposable
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net
@using TagzApp.ViewModels.Data
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Message Moderation</PageTitle>

@* Connection Status Indicator *@
@if (_ConnectionState != HubConnectionState.Connected)
{
	<div class="alert alert-warning border-0 rounded-0 mb-0 d-flex align-items-center justify-content-center connection-indicator @(_ConnectionState.ToString().ToLower())" style="position: sticky; top: 0; z-index: 1050;">
		<div class="d-flex align-items-center">
			@if (_ConnectionState == HubConnectionState.Reconnecting)
			{
				<div class="spinner-border spinner-border-sm text-warning me-2" role="status" aria-hidden="true"></div>
				<span><strong>Reconnecting to server...</strong> (Attempt @_ReconnectAttempt)</span>
			}
			else if (_ConnectionState == HubConnectionState.Disconnected)
			{
				<i class="bi bi-wifi-off text-danger me-2"></i>
				<span><strong>Connection lost.</strong> Attempting to reconnect...</span>
			}
			else
			{
				<div class="spinner-border spinner-border-sm text-info me-2" role="status" aria-hidden="true"></div>
				<span><strong>Connecting to server...</strong></span>
			}
		</div>
	</div>
}

<div class="row">
	<div class="col-md-12">
		<h1 class="text-center">Moderate Content for TagzApp (@_Tag)</h1>
	</div>
</div>

<div class="row" style="padding: 0  10px!important;">
	<div class="col-md-6 d-flex align-items-center" style="">
		<span class="col-form-label-sm">Current Moderators:</span>
		<span class="currentModerators">
			@foreach (var moderator in _Moderators)
			{
				<img id="moderator-@moderator.Email"
				title="@moderator.DisplayName"
				src="@moderator.AvatarImageSource" />
			}
		</span>
	</div>

	<div class="col-md-6 d-flex justify-content-end align-items-center">

		@* TODO: Add a badge with a number of currently blocked users *@
		<a class="link-danger me-3" title="Blocked Users" href="/BlockedUsers">
			<span id="blockedCount">
				@BlockedUserCount
			</span> <i class="bi bi-x-circle-fill"></i>
		</a>

		<label for="approved" style="text-wrap: nowrap; margin-right: 1.4em">Approval Status:</label>
		<select id="approved" @bind="FilterApprovalStatus">
			<option value="@FilterModerationState.All">All</option>
			<option value="@FilterModerationState.Approved">Approved Only</option>
			<option value="@FilterModerationState.Rejected">Rejected Only</option>
			<option value="@FilterModerationState.Pending">Needs Review</option>
		</select>

		<label for="providers" class="px-2">Providers:</label>
		<div class="btn-group" role="group">

			@foreach (var provider in _Providers.OrderBy(p => p.Name))
			{
				<input type="checkbox" class="btn-check" name="options" id="@provider.Id" checked autocomplete="off">
				<label title="@provider.Name" 
				class="btn btn-outline-primary providerSwitch" 
				@onclick="() => ToggleProviderFilter(provider.Id)"
				for="@provider.Id"><i class="provider bi @ContentModel.MapProviderToIcon(provider.Id) darkbg"></i></label>
			}

		</div>

	</div>

</div>
<div class="row" style="padding: 2px 10px!important">

	@if (_Content.Any())
	{
		<div id="taggedContent" style="position:absolute; left: 0;height: calc(100vh - 210px)">


			<CascadingValue Value="this">
				@foreach (var content in _Content.Values.Reverse())
				{
					<ModerationMessage @key="content" Content="content" />
				}
			</CascadingValue>

		</div>

	}
	else if (_Loading)
	{
		<div class=" d-flex justify-content-center align-items-center" style="height: calc(100vh - 210px); text-align: center;">
			<div class="spinner-border" role="status"> <span class="visually-hidden">Loading...</span> </div>
		</div>
	} else {
		<div class=" d-flex justify-content-center align-items-center" style="height: calc(100vh - 210px); text-align: center;">
			<div class="alert alert-danger" role="status"> No messages found that meet the filter criteria</div>
		</div>
	}

	<PauseButton @ref="ThePauseButton" OnPauseUpdates="OnPauseClick" />

</div>

@code {

	[CascadingParameter(Name = "HideFooter")] public bool HideFooter { get; set; }

	public int BlockedUserCount { get; set; } = 0;

	public PauseButton ThePauseButton { get; set; } = new();

	private SortedList<DateTimeOffset, TagzApp.ViewModels.Data.ModerationContentModel> _Content = new();

	private HashSet<dynamic> _PauseQueue = new();

	private HashSet<NewModerator> _Moderators = new();

	private IEnumerable<AvailableProvider> _Providers = Enumerable.Empty<AvailableProvider>();

	private List<string> _FilteredProviders = [];
	private bool _Loading = true;

	private FilterModerationState _FilterApprovalStatus = FilterModerationState.All;
	private FilterModerationState FilterApprovalStatus
	{
		get { return _FilterApprovalStatus; }
		set
		{
			_FilterApprovalStatus = value;
			_Loading = true;
			_Content.Clear();
			StateHasChanged();
			FilterContent = InitializeContent().ContinueWith(async t => {
				_Loading = false;
				await InvokeAsync(StateHasChanged);
				FilterContent = null;
			});
		}
	}

	private HubConnection? _Connection;

	private HubConnectionState _ConnectionState = HubConnectionState.Disconnected;
	private int _ReconnectAttempt = 0;

	private bool _IsDisposing = false;

	string _Tag = string.Empty;

	protected override async Task OnInitializedAsync()
	{

		HideFooter = true;

		await ConfigureSignalRConnection();

		if (_Connection?.State == HubConnectionState.Connected)
		{
			_Tag = (await _Connection.InvokeAsync<string[]>("GetTags"))?.FirstOrDefault() ?? string.Empty;

			BlockedUserCount = await _Connection.InvokeAsync<int>("GetBlockedUserCount");

			_Providers = await _Connection.InvokeAsync<IEnumerable<AvailableProvider>>("GetAvailableProviders");
			_FilteredProviders = _Providers.Select(p => p.Id).ToList();

			_Moderators = (await _Connection.InvokeAsync<NewModerator[]>("GetCurrentModerators")).ToHashSet();

			await InitializeContent();
		}

		await base.OnInitializedAsync();

	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await JSRuntime.InvokeVoidAsync("window.WaterfallUi.ConfigureKeyboardSupport");
		await JSRuntime.InvokeVoidAsync("window.WaterfallUi.SetTitle","Message Moderation");
		await base.OnAfterRenderAsync(firstRender);
	}

	async Task ConfigureSignalRConnection()
	{

		_ConnectionState = HubConnectionState.Connecting;
		await InvokeAsync(StateHasChanged);

		_Connection = new HubConnectionBuilder()
					.WithUrl(NavigationManager.ToAbsoluteUri("/mod"))
					.WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) })
					.Build();

		_Connection.Reconnecting += async (error) => {
			_ConnectionState = HubConnectionState.Reconnecting;
			_ReconnectAttempt++;
			await InvokeAsync(StateHasChanged);
		};

		_Connection.Reconnected += async (connectionId) => {
			_ConnectionState = HubConnectionState.Connected;
			_ReconnectAttempt = 0;
			await InvokeAsync(StateHasChanged);
		};

		await ListenForModerationContent();

		_Connection.Closed += async (error) => {

			_ConnectionState = HubConnectionState.Disconnected;
			await InvokeAsync(StateHasChanged);

			if (_IsDisposing) return;

			_ReconnectAttempt = 0;

			while (!_IsDisposing && _Connection.State == HubConnectionState.Disconnected)
			{
				_ReconnectAttempt++;
				await InvokeAsync(StateHasChanged);

				await Task.Delay(2000);
				try {

					_ConnectionState = HubConnectionState.Connecting;
					await InvokeAsync(StateHasChanged);

					await _Connection.StartAsync();
					_ConnectionState = HubConnectionState.Connected;
					_ReconnectAttempt = 0;
					await InvokeAsync(StateHasChanged);
					break;

				} catch (Exception ex)
				{
					_ConnectionState = HubConnectionState.Disconnected;
					Console.WriteLine($"Error while attempting to reconnect (Attempt {_ReconnectAttempt}): {ex.Message}");
				}

			}

		};

		try 
		{
			await _Connection.StartAsync();
			_ConnectionState = HubConnectionState.Connected;
			await InvokeAsync(StateHasChanged);
		}
		catch (Exception ex)
		{
			_ConnectionState = HubConnectionState.Disconnected;
			Console.WriteLine($"Error starting connection: {ex.Message}");
		}

	}

	async Task ListenForModerationContent()
	{
		if (_Connection == null) return;

		_Connection.On<ContentModel>("NewWaterfallMessage", async (content) =>
		{

			if (!_FilteredProviders.Any(c => c.Equals(content.Provider, StringComparison.InvariantCultureIgnoreCase))) return;
			if (_FilterApprovalStatus != FilterModerationState.All && _FilterApprovalStatus != FilterModerationState.Pending) return;

			if (ThePauseButton.IsPaused)
			{
				if (!_PauseQueue.Any(p => p.ProviderId == content.ProviderId) && !_Content.Any(c => c.Value.ProviderId == content.ProviderId)) {
					_PauseQueue.Add(content);
					ThePauseButton.Counter = _PauseQueue.Count();
				}

				return;
			}

			_Content.Add(content.Timestamp, ModerationContentModel.ToModerationContentModel(content));
			await InvokeAsync(StateHasChanged);
		});

		_Connection.On<ModerationContentModel>("NewApprovedMessage", HandleApprovedMessage);

		_Connection.On<ModerationContentModel>("NewRejectedMessage", async (content) =>
		{

			if (ThePauseButton.IsPaused)
			{
				if (!_PauseQueue.Any(p => p.ProviderId == content.ProviderId) && !_Content.Any(c => c.Value.ProviderId == content.ProviderId))
				{
					_PauseQueue.Add(content);
				}
				else if (_PauseQueue.Any(p => p.ProviderId == content.ProviderId))
				{
					_PauseQueue.RemoveWhere(p => p.ProviderId == content.ProviderId);
					_PauseQueue.Add(content);
				}
				ThePauseButton.Counter = _PauseQueue.Count();

				return;
			}

			var existing = _Content.FirstOrDefault(p => p.Value.ProviderId == content.ProviderId);
			if (existing.Value is not null && existing.Value.State == ModerationState.Rejected) return;

			if (existing.Value is not null)
			{
				existing.Value.State = ModerationState.Rejected;
				existing.Value.ModerationTimestamp = content.ModerationTimestamp;
			}
			else
			{
				_Content.Add(content.Timestamp, content);
			}

			await InvokeAsync(StateHasChanged);

		});

		_Connection.On<int>("NewBlockedUserCount", async (newCount) =>
		{
			BlockedUserCount = newCount;
			await InvokeAsync(StateHasChanged);
		});

		_Connection.On<NewModerator>("NewModerator", async (moderator) =>
		{
			_Moderators.Add(moderator);
			await InvokeAsync(StateHasChanged);
		});

		_Connection.On<string>("RemoveModerator", async (moderatorEmail) =>
		{
			var thisMod = _Moderators.FirstOrDefault(m => m.Email.Equals(moderatorEmail, StringComparison.InvariantCultureIgnoreCase));
			if (thisMod is not null)
			{
				_Moderators.Remove(thisMod);
				await InvokeAsync(StateHasChanged);
			}
		});

	}

	async Task HandleApprovedMessage(ModerationContentModel content)
	{

		if (ThePauseButton.IsPaused)
		{
			if (!_PauseQueue.Any(p => p.ProviderId == content.ProviderId) && !_Content.Any(c => c.Value.ProviderId == content.ProviderId)) {
				_PauseQueue.Add(content);
				ThePauseButton.Counter = _PauseQueue.Count();
			} else if (_PauseQueue.Any(p => p.ProviderId == content.ProviderId)) {
				_PauseQueue.RemoveWhere(p => p.ProviderId == content.ProviderId);
				_PauseQueue.Add(content);
				ThePauseButton.Counter = _PauseQueue.Count();
			}
			return;
		}

		var existing = _Content.FirstOrDefault(p => p.Value.ProviderId == content.ProviderId);
		if (existing.Value is not null && existing.Value.State == ModerationState.Approved) return;

		if (existing.Value is not null)
		{
			existing.Value.State = ModerationState.Approved;
			existing.Value.ModerationTimestamp = content.ModerationTimestamp;
		}
		else
		{
			_Content.Add(content.Timestamp, content);
		}
		await InvokeAsync(StateHasChanged);

	}

	async Task InitializeContent()
	{
		if (_Connection?.State != HubConnectionState.Connected) return;

		var approvalStatus = (int)_FilterApprovalStatus;
		var currentContent = (await _Connection.InvokeAsync<IEnumerable<ModerationContentModel>>("GetFilteredContentByTag", _Tag, _FilteredProviders.ToArray(), approvalStatus))
			.ToArray();

		foreach (var content in currentContent.OrderByDescending(c => c.Timestamp).ToArray())
		{
			try
			{
				_Content.Add(content.Timestamp, content);
			}
			catch (ArgumentException)
			{
				_Content.Add(content.Timestamp.AddMicroseconds(1), content);

			}
			
		}

		_Loading = false;

	}

	public async Task Moderate(ModerationAction action)
	{
		if (_Connection?.State == HubConnectionState.Connected)
		{
			await _Connection.InvokeAsync("SetStatus", action.Provider, action.ProviderId, action.State);
		}
		// TODO: Tag message appropriately to indicate moderation state

	}

	public async Task OnPauseClick(bool newPauseState)
	{

		// Console.WriteLine($"New Pause State: {newPauseState}");

		if (!newPauseState)
		{
			// Add all the items in the pause queue to the waterfall
			foreach (var item in _PauseQueue)
			{
				if (item is ContentModel content)
				{
					_Content.Add(content.Timestamp, ModerationContentModel.ToModerationContentModel(content));
				}
			}
			_PauseQueue.Clear();
			ThePauseButton.Counter = 0;
		}

		await InvokeAsync(StateHasChanged);
	}

	Task ToggleProviderFilter(string providerId)
	{

		if (_FilteredProviders.Contains(providerId))
		{
			_FilteredProviders.Remove(providerId);
		}
		else
		{
			_FilteredProviders.Add(providerId);
		}

		_Content.Clear();
		_Loading = true;
		StateHasChanged();
		FilterContent = InitializeContent().ContinueWith(async t => {
			_Loading = false;
			await InvokeAsync(StateHasChanged);
			FilterContent = null;
		});

		return Task.CompletedTask;

	}

	private Task? FilterContent;

	private enum FilterModerationState
	{
		All = -1,
		Pending = 0,
		Approved = 1,
		Rejected = 2,
	};

	public async ValueTask DisposeAsync()
	{

		_IsDisposing = true;
		if (_Connection is not null)
		{
			await _Connection.DisposeAsync();
		}

	}

}

<style>
	.connection-indicator {
		background: linear-gradient(90deg, #fff3cd 0%, #ffeaa7 100%);
		border-left: 4px solid #ffc107;
		box-shadow: 0 2px 4px rgba(0,0,0,0.1);
		animation: pulse-warning 2s infinite;
	}

	.connection-indicator.connecting {
		background: linear-gradient(90deg, #d1ecf1 0%, #bee5eb 100%);
		border-left-color: #17a2b8;
	}

	.connection-indicator.reconnecting {
		background: linear-gradient(90deg, #fff3cd 0%, #ffeaa7 100%);
		border-left-color: #ffc107;
	}

	.connection-indicator.disconnected {
		background: linear-gradient(90deg, #f8d7da 0%, #f5c6cb 100%);
		border-left-color: #dc3545;
	}

	@@keyframes pulse-warning {
		0%, 100% { 
			opacity: 1; 
		}
		50% { 
			opacity: 0.8; 
		}
	}

	.bi-wifi-off {
		animation: shake 0.5s infinite;
	}

	@@keyframes shake {
		0%, 100% { transform: translateX(0); }
		25% { transform: translateX(-2px); }
		75% { transform: translateX(2px); }
	}
</style>
