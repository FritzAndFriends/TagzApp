@using Microsoft.AspNetCore.Components.Sections
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveWebAssembly
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div id="taggedContent" class="">

	@foreach (var content in _Content.Values.Reverse())
	{
		<WaterfallMessage Content="content" @key="content" OnContentSelected="ShowModal" />
	}

</div>

<PauseButton @ref="thePauseButton" />

<WaterfallModal @ref="Modal" Content="ModalContent" />

@code {

	private SortedList<DateTimeOffset, TagzApp.ViewModels.Data.ContentModel> _Content = new();

	WaterfallModal Modal = new();
	ContentModel ModalContent = null!;

	PauseButton thePauseButton = new();

	HubConnection _Connection = null!;

	[Parameter, EditorRequired]
	public string TagTracked { get; set; }

	protected override async Task OnInitializedAsync()
	{

		await StartSignalRHub();

		var existingContent = await _Connection.InvokeAsync<IEnumerable<ContentModel>>("GetExistingContentForTag", TagTracked);

		Console.WriteLine($"Received {existingContent.Count()} messages for tag {TagTracked}");

		foreach (var content in existingContent)
		{
			_Content.Add(content.Timestamp, content);
		}

		await base.OnInitializedAsync();

	}

	private async Task StartSignalRHub()
	{
		_Connection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri($"/messages?t={TagTracked}"))
			.Build();

		_Connection.On<ContentModel>("NewWaterfallMessage", (content) =>
		{
			_Content.Add(content.Timestamp, content);
			StateHasChanged();
		});

		_Connection.On<string,string>("RemoveMessage", (provider, providerId) =>
		{
			var thisMessage = _Content.FirstOrDefault(c => c.Value.Provider == provider && c.Value.ProviderId == providerId);
			if (thisMessage.Value is not null)
			{
				// TODO: Change this to not use the DateTimeOffset as a key
				_Content.Remove(thisMessage.Key);
				StateHasChanged();
			}
		});

		await _Connection.StartAsync();
	}

	async Task ShowModal(ContentModel content)
	{
		Console.WriteLine("Showing modal");
		ModalContent = content;
		await _Connection.InvokeAsync("SendMessageToOverlay", TagTracked, content.Provider, content.ProviderId);
		await Modal.Open();

	}

	public ValueTask DisposeAsync()
	{
		if (_Connection is null) return ValueTask.CompletedTask;
		return _Connection.DisposeAsync();
		// return ValueTask.CompletedTask;
	}

}
