@using TagzApp.ViewModels.Data
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<article @ref="thisArticle" 
	class="modMessage @AdditionalClasses"
	@onmouseover="() => ShowModerationActions = true"
	@onmouseleave="() => ShowModerationActions = false"> @* @onclick="() => OnContentSelected?.InvokeAsync(Content)"> *@

	@if (ShowModerationActions)
	{
		<div id="moderationAction">
			<i class="bi bi-check2 approve" title="Approve this content" @onclick="async () => await Moderate(ModerationState.Approved)"></i>
			<i class="bi bi-x-circle-fill reject" title="Reject this content" @onclick="async () => await Moderate(ModerationState.Rejected)"></i>
			<i class="bi bi-journal-text more" 
				@onclick="@(() => NavigationManager.NavigateTo($"/MessageDetails/{Content.Provider}/{Content.ProviderId}"))"
				title="More Actions"></i>
		</div>
	}

	<img class="ProfilePicture" 
		src="@Content.AuthorProfileImageUri" 
		alt="@Content.AuthorDisplayName"
		onerror="this.src='/img/user.jpg';" />

		<div class="byline">
			<div class="author">@Content.AuthorDisplayName <i class="autoMod"></i></div>
			<div class="authorUserName" title="@Content.AuthorUserName">
				@if (!Content.AuthorUserName.TrimStart('@').Equals(Content.AuthorDisplayName)) { 
					@Content.AuthorUserName
				}
			</div>
		</div>

	<i class="provider bi @MapProviderToIcon(Content.Provider)"></i>

	<div class="time">
		<div>@Content.Timestamp.ToLocalTime().ToString("d") @Content.Timestamp.ToLocalTime().ToString("t")</div>
		<div class="autoModReason"></div>
	</div>

	<div class="content">@((MarkupString)Content.Text)</div>


</article>


@code {

	[Parameter]
	public ModerationContentModel Content { get; set; }

	// [Parameter]
	// public EventCallback<ModerationAction> OnModerate { get; set; }

	[CascadingParameter]
	public Components.Pages.Moderation ModerationPage { get; set; }

	private ElementReference thisArticle;

	private List<string> _CssClasses = new();
	private string CssClass => string.Join(" ", _CssClasses);

	private bool ShowModerationActions = false;

	protected override Task OnAfterRenderAsync(bool firstRender)
	{

		if (firstRender)
		{
			JSRuntime.InvokeVoidAsync("window.Masonry.resizeGridItem", thisArticle);
			Console.WriteLine($"Rendered message from {Content.AuthorDisplayName}");
		}

		return base.OnAfterRenderAsync(firstRender);
	}

	private const string CSS_APPROVED = "status-approved";
	private const string CSS_REJECTED = "status-rejected status-humanmod";

	public string AdditionalClasses => Content?.State switch
	{
		ModerationState.Approved => CSS_APPROVED,
		ModerationState.Rejected => CSS_REJECTED,
		_ => ""
	};

	async Task Moderate(ModerationState action)
	{

		Content.ModerationTimestamp = DateTimeOffset.Now;
		Content.State = action;

		ShowModerationActions = false;

		StateHasChanged();

		await ModerationPage.Moderate(new ModerationAction { 
			Provider = Content.Provider,
			ProviderId = Content.ProviderId,
			State = action,
			Timestamp = DateTimeOffset.Now
		});

	}

	public static string MapProviderToIcon(string provider) =>
	provider?.ToLowerInvariant().Trim() switch
		{
			"twitter" => "bi-twitter-x",
			"website" => "bi-globe2",
			"youtube-chat" => "bi-youtube",
		_ => $"bi-{provider?.ToLowerInvariant().Trim() ?? "question-circle"}"
		};

}