@page "/admin/uicustomization"
@using PSC.Blazor.Components.MarkdownEditor
@using PSC.Blazor.Components.MarkdownEditor.Enums
@attribute [Authorize(Roles = RolesAndPolicies.Role.Admin)]
@layout AdminLayout
@inject ApplicationConfiguration ApplicationConfiguration
@inject IJSRuntime JSRuntime
@inject ToastService ToastService
@rendermode InteractiveServer

<PageTitle>System Administration: UI Customization</PageTitle>

<dl>

	<dt><label for="SiteName">Site Name:</label></dt>
	<dd><input name="SiteName" @bind="@ApplicationConfiguration.SiteName" /></dd>

	<dt><label>Moderation Enabled:</label></dt>
	<dd>
		<InputRadioGroup @bind-Value="@ApplicationConfiguration.ModerationEnabled">
			<InputRadio Value="true" />Enabled
			<InputRadio Value="false" />Disabled
		</InputRadioGroup>
	</dd>


	<dt><label for="StreamStart">Stream Start Timestamp:</label></dt>
	<dd>
		<input type="datetime-local" @bind="@ApplicationConfiguration.StreamStart" />

		<button class="btn btn-primary"	
			@onclick="() => ApplicationConfiguration.StreamStart = DateTime.Now">Now</button>

	</dd>

	<dt><label for="WaterfallHeaderCss">Waterfall header CSS:</label></dt>
	<dd>
		<InputTextArea name="WaterfallHeaderCss"
									 @bind-Value="@ApplicationConfiguration.WaterfallHeaderCss"
									 style="width: 40em; height: 10em"></InputTextArea>
	</dd>

	<dt><label for="WaterfallHeaderMarkdown">Waterfall Header (markdown):</label></dt>
	<dd data-permanent>
		@if (_isMarkdownEditorReady)
		{
			<MarkdownEditor @key="markdownEditor" 
											Value="@ApplicationConfiguration.WaterfallHeaderMarkdown"
											ValueChanged="@OnMarkdownValueChanged"
											AutoDownloadFontAwesome="true">
				<Toolbar>
					<MarkdownToolbarButton Action="MarkdownAction.Bold" Icon="fa fa-bold" />
					<MarkdownToolbarButton Action="MarkdownAction.Italic" Icon="fa fa-italic" />
					<MarkdownToolbarButton Action="MarkdownAction.Heading" Separator Icon="fa fa-header" />
					<MarkdownToolbarButton Action="MarkdownAction.HeadingSmaller" Icon="fa fa-sm fa-header" />
					<MarkdownToolbarButton Action="MarkdownAction.HeadingBigger" Icon="fa fa-lg fa-header" />
					<MarkdownToolbarButton Action="MarkdownAction.Heading1" Separator Icon="bi bi-type-h1" />
					<MarkdownToolbarButton Action="MarkdownAction.Heading2" Icon="bi bi-type-h2" />
					<MarkdownToolbarButton Action="MarkdownAction.Heading3" Icon="bi bi-type-h3" />
					<MarkdownToolbarButton Action="MarkdownAction.Guide" Separator Icon="fa fa-question-circle" />
				</Toolbar>
			</MarkdownEditor>
		}
		else
		{
			<div class="text-muted">Loading markdown editor...</div>
		}
	</dd>

</dl>

<input type="submit" value="Save Changes" class="btn btn-primary" @onclick="SaveChanges" />

@code {

	private bool _isMarkdownEditorReady = false;
	private string markdownEditor = "markdown-editor-instance";

	protected override async Task OnInitializedAsync()
	{
		// Ensure ApplicationConfiguration is properly initialized
		if (string.IsNullOrEmpty(ApplicationConfiguration.WaterfallHeaderMarkdown))
		{
			ApplicationConfiguration.WaterfallHeaderMarkdown = "# Welcome to TagzApp";
		}
		
		await base.OnInitializedAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// Ensure the CSS is loaded before showing the markdown editor
			await Task.Delay(100);
			_isMarkdownEditorReady = true;
			StateHasChanged();
		}
		
		await base.OnAfterRenderAsync(firstRender);
	}

	Task OnMarkdownValueChanged(string value)
	{
		ApplicationConfiguration.WaterfallHeaderMarkdown = value;
		return Task.CompletedTask;
	}

	async Task SaveChanges()
	{
		await ApplicationConfiguration.SaveConfiguration(ConfigureTagzAppFactory.Current);
		ToastService.Add("Configuration Saved", MessageSeverity.Success);
	}

}
