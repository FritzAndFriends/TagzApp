@page "/admin/users"
@using Gravatar
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = RolesAndPolicies.Role.Admin)]
@layout Admin.Shared.AdminLayout
@inject UserManager<TagzAppUser> UserManager
@inject NavigationManager NavigationManager
@inject ApplicationConfiguration AppConfig
@inject IJSRuntime Js
@rendermode @(new InteractiveServerRenderMode(false))

<PageTitle>System Administration: User Management</PageTitle>

<h3>User Roles Management</h3>

@if (AppConfig.SingleUserMode)
{
	<div>
		You're in Single User Mode

		<p class="alert alert-primary" role="alert">
			Converting to Multi-User Mode is a one-way operation that cannot be reversed.  You will need to register as a new user and login with that user immediately to be granted Admin access.  After that, you can add more users with various roles.
		</p>

		<button type="button" class="btn btn-danger" @onclick="ConvertUserMode">Change to Multi-User Mode</button>

	</div>
}
else
{
	<QuickGrid Items="UserList" TGridItem="UserViewModel" >
		<TemplateColumn Title="Name" Class="UserGridNameColumn" Align="Align.Left">
			<ItemTemplate>
				<img class="gravatar" title="Gravatar" src="@context.Email.ToGravatar()" />
				@context.DisplayName
			</ItemTemplate>
		</TemplateColumn>
		<PropertyColumn Title="User Email" Property="u => u.Email"></PropertyColumn>
		<PropertyColumn Title="User Roles" Property="u => string.Join(',', u.Roles)"></PropertyColumn>
		<TemplateColumn Title="Action">
			<ItemTemplate>
				<span style="cursor: pointer" class="link-primary nav-link" @onclick="@(() => AssignRoles(context))">Assign Roles</span>
			</ItemTemplate>
		</TemplateColumn>
	</QuickGrid>

@* 	<table>
		<tr>
			<th style="width:20em; padding-left: 85px;">Name</th>
			<th>User Email</th>
			<th>Action</th>
		</tr>
		@foreach (var user in UserList.OrderBy(u => u.DisplayName))
		{
			<tr>
				<td>
					<img class="gravatar" title="Gravatar" src="@user.Email.ToGravatar()" />
					@user.DisplayName
				</td>
				<td>@user.Email</td>
				<td><span style="cursor: pointer" class="link-primary nav-link" @onclick="@(() => AssignRoles(user))">Assign Roles</span></td>
			</tr>
		}
	</table>
 *@
	<ManageRoles @ref="ManageRolesDialog" CurrentUser="SelectedUser" OnComplete="CloseManageRoles" />
}

@code {

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	private IQueryable<UserViewModel> UserList { get; set; } = Enumerable.Empty<UserViewModel>().AsQueryable();

	private UserViewModel SelectedUser { get; set; } = new(null!);

	private ManageRoles ManageRolesDialog = new();

	override protected async Task OnParametersSetAsync()
	{

		if (AppConfig.SingleUserMode) return;

		var users = await UserManager.Users.ToListAsync();
		var userViewModels = new List<UserViewModel>();
		
		foreach (var user in users)
		{
			var userViewModel = new UserViewModel(user);
			userViewModel.Roles = (await UserManager.GetRolesAsync(user)).ToList();
			userViewModels.Add(userViewModel);
		}
		
		UserList = userViewModels.AsQueryable();
	}

	private async Task AssignRoles(UserViewModel user)
	{
		SelectedUser = user;
		await ManageRolesDialog.Open();
	}

	private void CloseManageRoles()
	{
		SelectedUser = new UserViewModel(null!);
	}

	private async Task ConvertUserMode()
	{
		var accepted = await Js.InvokeAsync<bool>("confirm", "Are you sure you would like to convert to multi-user mode?  This is a one-way operation and cannot be reversed");
		if (accepted)
		{
			AppConfig.SingleUserMode = false;
			await AppConfig.SaveConfiguration(ConfigureTagzAppFactory.Current);
			await Task.Run(() => Program.Restart());
			NavigationManager.NavigateTo("/");
		}
	}

	public class UserViewModel : TagzAppUser
	{

		public UserViewModel(TagzAppUser user) : base()
		{
	
			if (user is null) return;

			this.Id = user.Id;
			this.UserName = user.UserName;
			this.NormalizedUserName = user.NormalizedUserName;
			this.Email = user.Email;
			this.NormalizedEmail = user.NormalizedEmail;
			this.EmailConfirmed = user.EmailConfirmed;
			this.PasswordHash = user.PasswordHash;
			this.SecurityStamp = user.SecurityStamp;
			this.ConcurrencyStamp = user.ConcurrencyStamp;
			this.PhoneNumber = user.PhoneNumber;
			this.PhoneNumberConfirmed = user.PhoneNumberConfirmed;
			this.TwoFactorEnabled = user.TwoFactorEnabled;
			this.LockoutEnd = user.LockoutEnd;
			this.LockoutEnabled = user.LockoutEnabled;
			this.AccessFailedCount = user.AccessFailedCount;
			this.DisplayName = user.DisplayName;
		}

		public List<string> Roles { get; set; } = new();

	}

}
