@page "/BlockedUsers"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IMessagingService _Service
@inject UserManager<TagzAppUser> _UserManager
@inject IModerationRepository _Repository

<h2>Currently Blocked Users</h2>

@* Create a form that allows submission of a provider and username to block *@
<form action="" method="post">
	<select name="provider">
		@foreach (var provider in Providers)
		{
			<option value="@provider.Id">@provider.DisplayName</option>
		}
	</select>
	<input id="username" name="username" maxlength="20" placeholder="User Name" />
	<button type="submit" class="btn btn-primary">Block User</button>
</form>


@if (Users?.Any() ?? false)
{
	<table class="table">
	<thead>
		<tr>
			<th></th>
			<th>Provider</th>
			<th>Username</th>
			<th>Blocked By</th>
			<th>Blocked On</th>
			<th>Blocked Until</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var user in Users)
			{
				<tr>

					<td>
						<a class="btn btn-danger" asp-page-handler="Unblock" asp-route-provider="@user.Provider"
							asp-route-username="@user.UserName">
							<i class="bi bi-x-circle-fill"></i>
						</a>
					</td>
					<td>@user.Provider</td>
					<td>@user.UserName</td>
					<td>@user.BlockingUser</td>
					<td data-utc="@user.BlockedDate">@user.BlockedDate</td>
					<td>@(user.ExpirationDate > DateTime.Now.AddYears(1) ? "No end date" : user.ExpirationDate.Value.Date)</td>
				</tr>
			}
		</tbody>
	</table>
}
else
{
	<p>No users are currently blocked.</p>
}

@* @section Scripts {
	<script>
		// onload of the page, reformat the dates to local time
		$(function () {
			$('td[data-utc]').each(function () {
				var utcDate = $(this).data('utc');
				var localDate = new Date(utcDate);
				$(this).text(localDate.toLocaleString());
			});
		});
	</script>
} *@

@code {

	private IEnumerable<ISocialMediaProvider> Providers { get; set; }
	private IEnumerable<BlockedUser> Users { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Providers = _Service.Providers
			.OrderBy(x => x.DisplayName).ToArray();
		Users = await _Repository.GetBlockedUsers();
	}

	public async Task OnPost(string provider, string username)
	{
		var user = await _UserManager.FindByNameAsync(username);
		if (user != null)
		{
			await _Repository.BlockUser(provider, username, user.Id, new DateTimeOffset(new DateTime(2050, 1, 1), TimeSpan.Zero));
		}
	}

	public async Task OnGetUnblock(string provider, string username)
	{
		await _Repository.UnblockUser(provider, username);
		Users = await _Repository.GetBlockedUsers();
	} 

}