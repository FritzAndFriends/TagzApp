@using Microsoft.AspNetCore.Identity
@using TagzApp.Providers.AzureQueue
@using TagzApp.Providers.Blazot
@using TagzApp.Providers.Bluesky
@using TagzApp.Providers.TwitchChat
@using TagzApp.Providers.Mastodon
@using TagzApp.Blazor.Client.Components.Admin
@using TagzApp.Providers.Twitter
@using TagzApp.Providers.YouTubeChat
@inject UserManager<TagzAppUser> _UserManager

@typeparam TProvider

@switch (Provider.GetType().Name)
{
	case nameof(AzureQueueProvider):
		{
			<AzureQueue_Config_Ui Provider="@Provider" />
			break;
		}
	case nameof(BlazotProvider):
	{
			<Blazot_Config_Ui Provider="@Provider" />
			break;
		}
	case nameof(BlueskyProvider):
		{
			<Bluesky_Config_Ui Provider="@Provider" />
			break;
		}
	case nameof(MastodonProvider):
		{
			<Mastodon_Config_Ui Provider="@Provider" />
			break;
		}
	case nameof(TwitchChatProvider):
		{
			<TwitchChat_Config_Ui Provider="@Provider" />
			break;
		}
	case nameof(TwitterProvider):
		{
			<Twitter_Config_Ui Provider="@Provider" />
			break;
		}
	case nameof(YouTubeChatProvider):
		{
			<CascadingValue Name="GoogleEmail" Value="GoogleEmail">
			<CascadingValue Name="GoogleRefreshToken" Value="GoogleRefreshToken">
			<YouTubeChat_Config_Ui Provider="@Provider" />
			</CascadingValue>
			</CascadingValue>
			break;
		}
	default:
		{
			<p>Unknown provider type: @Provider?.GetType().Name</p>
			break;
		}
}


@code {
	[Parameter, EditorRequired]
	public TProvider Provider { get; set; }

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	private string GoogleRefreshToken { get; set; } = string.Empty;
	private string GoogleEmail { get; set; } = string.Empty;

	protected override async Task OnParametersSetAsync()
	{

		if (Provider is YouTubeChatProvider && HttpContext?.User is not null)
		{
			var user = await _UserManager.GetUserAsync(HttpContext.User);
			if (user is not null)
			{
				GoogleRefreshToken = await _UserManager.GetAuthenticationTokenAsync(user, "Google", "refresh_token") ?? string.Empty;
				GoogleEmail = await _UserManager.GetAuthenticationTokenAsync(user, "Google", "Email") ?? string.Empty;
			}
		}

		await base.OnParametersSetAsync();

	}

}
