@page "/admin/modalcustomization"

@layout AdminLayout
@inject IJSRuntime JSRuntime
@inject ModalConfiguration Config
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@rendermode InteractiveServer

<div class="row" style="min-height: 300px">
	<div class="col-md-6">
<dl>

	<dt><label for="Caption">Text on back of card:</label></dt>
	<dd><textarea name="Caption" width="30" height="5" @bind="@Config.Caption" @bind:event="oninput" /></dd>

	<dt><label for="FontColor">Font Color on the back of card:</label></dt>
	<dd>
		<input type="color" name="FontColor" @bind-value="@Config.FontColor" />
	</dd>

	<dt><label for="Font">Font on the back of card:</label></dt>
	<dd>
		<input name="Font" @bind-value="@Config.Font" />
	</dd>

	<dt><label for="FontIsBold">Font is Bold on the back of card:</label>
		<input name="FontIsBold" type="checkbox" @bind-value="@Config.FontIsBold" />
	</dt>

	<dt><label for="BackColor">Background color of the back of card:</label></dt>
	<dd>
		<input type="color" name="BackColor" @bind-value="@Config.BackgroundColor" />
	</dd>

	<dt><label for="BackgroundImage">Background Image:</label> 
		@if (!string.IsNullOrWhiteSpace(Config.BackgroundImage))
				{
					<button @onclick="RemoveBackgroundImage">
						@* Bootstrap icon trashcan *@
						<i class="bi bi-trash"></i>

					</button>
				}
			</dt>
	<dd>
		<InputFile OnChange="LoadBackgroundImage"></InputFile>
	</dd>

	<dt><label for="BackgroundSize">Background Image Size:</label></dt>
	<dd>
		<select name="BackgroundSize" @bind="@Config.BackgroundImageSize">
			<option value="cover">Cover</option>
			<option value="contain">Contain</option>
			<option value="auto">Auto</option>
		</select>
	</dd>

	@* Background image repeat *@
	<dt><label for="BackgroundRepeat">Background Image Repeat:</label>
		<input type="checkbox" name="BackgroundRepeat" @bind-value="@Config.BackgroundImageRepeat" />
	</dt>

	<dt><label for="BackgroundPosition">Background Image Position:</label></dt>
	<dd>
		<select name="BackgroundPosition" @bind="@Config.BackgroundImagePosition">
			<option>Left Top</option>
			<option>Left Center</option>
			<option>Left Bottom</option>
			<option>Right Top</option>
			<option>Right Center</option>
			<option>Right Bottom</option>
			<option>Center Top</option>
			<option>Center Center</option>
			<option>Center Bottom</option>
		</select>
	</dd>


</dl>

		<input type="submit" value="Save Changes" class="btn btn-primary" @onclick="SaveChanges" />
		@* Cancel changes button *@
		<input type="button" value="Cancel" class="btn btn-secondary" @onclick="CancelChanges" />

	</div>
	<div class="col-md-6">
		<h3>Demo:</h3>
		<div style="width: 50%; " class="modal-dialog modal-dialog-centered">
			<div class="modal-inner" style="height: 150px!important;">
				<div style=" position: relative;" class="modal-back modal-content"><div class="modal-back-content"></div></div>
			</div>
		</div>

	</div>
</div>

<style>

@((MarkupString)Config.GetCssWithBackgroundImage(_BackgroundImage, _BackgroundImageMimeType))
			
</style>

@code {

	private string _BackgroundImage = string.Empty;
	private string _BackgroundImageMimeType = string.Empty;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	protected override Task OnParametersSetAsync()
	{
		// TODO: This does not appear to be set at all times?
		if (HttpContext is null) 
			return base.OnInitializedAsync();
		
		var user = HttpContext.User;
		if (!user.IsInRole("Admin"))
		{
			NavigationManager.NavigateTo("/");
		}

		return base.OnInitializedAsync();
	}

	async Task SaveChanges()
	{
		Config.BackgroundImage = _BackgroundImage;
		Config.BackgroundImageMimeType = _BackgroundImageMimeType;

		Console.WriteLine($"Caption: {Config.Caption}");
		await Config.SaveConfiguration(ConfigureTagzAppFactory.Current);
		ToastService.Add("Changes Saved", MessageSeverity.Success);
	}

	async Task LoadBackgroundImage(InputFileChangeEventArgs args)
	{
		if (!args.File.ContentType.StartsWith("image/"))
		{
			Console.WriteLine("Invalid file type");
			return;
		}

		_BackgroundImageMimeType = args.File.ContentType;

		var stream = args.File.OpenReadStream();

		byte[] bytes;
		using (var memoryStream = new MemoryStream())
		{
			await stream.CopyToAsync(memoryStream);
			bytes = memoryStream.ToArray();
		}

		_BackgroundImage = Convert.ToBase64String(bytes);
	}

	async Task CancelChanges()
	{
		Config = await ModalConfiguration.LoadFromConfiguration(ConfigureTagzAppFactory.Current);
		_BackgroundImage = Config.BackgroundImage;
		_BackgroundImageMimeType = Config.BackgroundImageMimeType;
		ToastService.Add("Cancelled Changes", MessageSeverity.Info);
	}

	async Task RemoveBackgroundImage()
	{
		Console.WriteLine("Removing background image");

		_BackgroundImage = null;
		_BackgroundImageMimeType = null;
	}

}
