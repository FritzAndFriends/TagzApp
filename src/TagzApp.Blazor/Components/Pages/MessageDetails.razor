@page "/MessageDetails/{provider}/{providerId}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using TagzApp.ViewModels.Data
@attribute [Authorize(policy: RolesAndPolicies.Policy.Moderator)]
@inject IModerationRepository ModerationRepository
@inject UserManager<TagzAppUser> UserManager
@using Humanizer


<PageTitle>Message Details</PageTitle>
<h3>Message Details</h3>

<div class="row">
	<div class="col-md-12">
		<h1 class="text-center"><a href="@Model?.SourceUri" class="h1" target="_blank" style="text-decoration: none; color: inherit">Message Details</a><i class="bi bi-box-arrow-up-right" style="font-size: 0.5em;margin-left: 0.5em;"></i></h1>
	</div>
</div>

@* Create two columns one that is four columns wide that contains the formatted message and the right side of the screen should then contain all of the actions that we can take on the message  *@
@if (Model is not null) 
{
<div id="messageDetailsUI" class="row">
	<div class="col-md-4">
		<div class="card">

			@* Add a card head with the message author information *@
			<div class="card-header @(Model.State == ModerationState.Rejected ? "rejected" : Model.State == ModerationState.Approved ? "approved" : "")">
				<div class="row">
					<div class="col-md-2">
						<a href="@Model.AuthorProfileUri" target="_blank">
							<img src="@Model.AuthorProfileImageUri" onerror="this.src='/img/user.jpg';" class="rounded-circle" style="width: 50px; height: 50px;" />
						</a>
					</div>
					<div class="col-md-10">
						<h5 class="card-title">
							<a class="h6 authorName" style="text-decoration: none;" target="_blank" href="@Model.AuthorProfileUri">@Model.AuthorDisplayName</a>
							<i class="bi bi-box-arrow-up-right" style="font-size: 0.5em;"></i>
						</h5>
						@if (!Model.AuthorUserName.TrimStart('@').Equals(Model.AuthorDisplayName, StringComparison.CurrentCultureIgnoreCase)) {
							<p class="card-text">@Model.AuthorUserName</p>
						}
						@if (Model.State  != ModerationState.Pending)
						{
							<text>@Model.State.ToString() </text>
							@if (Model.State == ModerationState.Rejected || Model.State == ModerationState.Approved)
							{
								<text>by @Model.Moderator</text>

								<br />
							}
							@if (!string.IsNullOrEmpty(Model.Reason))
							{
								<text>for @Model.Reason</text>
							}
						}
					</div>
				</div>
			</div>

			<div class="card-body">
				<p id="messageContent" class="card-text">@((MarkupString)(Model.Content.FormatContentWithEmotes()))</p>

				@if (Model.PreviewCard is not null)
				{
					if (Model.PreviewCard.ImageUri.ToString().EndsWith(".mp4"))
					{
						<div class="contentcard">
							<video muted="muted" controls="controls" autoplay src="@Model.PreviewCard.ImageUri" class="card-img-top" alt="@Model.PreviewCard.AltText"></video>
						</div>
					}
					else
					{
						<div class="contentcard">
							<img onerror="this.onerror=null; window.WaterfallUi.FixEmbedImage(this);" src="@Model.PreviewCard.ImageUri" class="card-img-top" alt="@Model.PreviewCard.AltText" />
						</div>
					}
				}

			</div>
		</div>
	</div>
	<div class="col-md-8">
		<div class="card">
			<div class="card-body actions">

				@if (!string.IsNullOrEmpty(ValidationMessage))
				{
					<p class="alert-danger alert">@ValidationMessage</p>
				}

				<h5 class="card-title">Actions</h5>
				<EditForm FormName="BlockUser" Model="Model" OnSubmit="BlockUser" Enhance>
					<ul>
						@* Add a block user button *@
						<li>
							Block @Model.AuthorDisplayName on @Model.Provider.ToLowerInvariant().Humanize(LetterCasing.Title)

							with @* Add an select for the enum BlockedUserCapabilities *@
							<select name="blockedUserCapabilities" @bind="@BlockedUserCapabilities">
								@foreach (var capability in Enum.GetValues(typeof(BlockedUserCapabilities)))
								{
									<option value="@capability">@capability</option>
								}
							</select>
							
							<input type="submit" name="blockUser" value="Go" />
						</li>
					</ul>
				</EditForm>
			</div>
		</div>

		@if (_RecentAuthorMessages?.Any() ?? false)
		{
			<div class="card mt-3">
				<div class="card-header">
					Recent messages from @Model.AuthorDisplayName (@Model.AuthorUserName)
				</div>
				<div class="table-responsive recent-messages-wrapper" style="max-height: 300px; overflow-y: auto;">
                    <table class="table table-sm table-hover mb-0 recent-messages-table">
                        <thead class="table-light sticky-top" style="position: sticky; top: 0; z-index: 5;">
                            <tr>
                                <th style="width: 110px;">Time</th>
                                <th style="width: 90px;">Status</th>
                                <th>Message</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var msg in _RecentAuthorMessages)
                        {
                            <tr>
                                <td class="text-muted align-top" style="white-space: nowrap;">@msg.Timestamp.ToLocalTime().ToString("g")</td>
                                <td class="align-top">
                                    @if (msg.State == ModerationState.Approved)
                                    {
                                        <span class="badge bg-success">Approved</span>
                                    }
									else if (msg.State == ModerationState.Rejected)
									{
										var rejectedReason = string.IsNullOrWhiteSpace(msg.Reason) ? "Rejected" : msg.Reason;
										<span class="badge bg-danger" title="@rejectedReason">Rejected</span>
									}
                                    else
                                    {
                                        <span class="badge bg-secondary">Pending</span>
                                    }
                                </td>
                                <td style="font-size: 0.85em; line-height: 1.2em; max-width: 0;">
                                    <div style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;" title="@((MarkupString)msg.Content.FormatContentWithEmotes())">
                                        @((MarkupString)(msg.Content.FormatContentWithEmotes()))
                                    </div>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
			</div>
		}
	</div>
</div>
}

@code {

	[Parameter]
	public string Provider { get; set; } = null!;

	[Parameter]
	public string ProviderId { get; set; } = null!;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	public ModerationContentModel? Model { get; set; }

	private List<ModerationContentModel> _RecentAuthorMessages { get; set; } = new();

	private string? ValidationMessage { get; set; }

	private BlockedUserCapabilities BlockedUserCapabilities { get; set; } = BlockedUserCapabilities.Moderated;

	protected override async Task OnInitializedAsync()
	{

		var content = await ModerationRepository.GetContentWithModeration(Provider, ProviderId);
		Model = ModerationContentModel.ToModerationContentModel(content.Content, content.Action);

		if (Model is not null)
		{
			// Load recent messages by same author on this provider (excluding current)
			var recent = await ModerationRepository.GetRecentContentByAuthor(Provider, Model.AuthorUserName, 10);
			_RecentAuthorMessages = recent
				.Where(r => r.Content.ProviderId != ProviderId)
				.Select(r => ModerationContentModel.ToModerationContentModel(r.Content, r.Action))
				.OrderByDescending(r => r.Timestamp)
				.ToList();
		}

		await base.OnInitializedAsync();

	}

	async Task BlockUser()
	{

		var identityName = HttpContext?.User?.Identity?.Name;
		if (identityName is null)
		{
			ValidationMessage = "Unable to identify current user.";
			return;
		}
		var user = await UserManager.FindByNameAsync(identityName);
		if (user is null)
		{
			ValidationMessage = "Unable to find moderator user account.";
			return;
		}

		if (Model is not null)
		{
			await ModerationRepository.BlockUser(
				Model.AuthorUserName,
				Model.Provider,
				user.DisplayName!,
				new DateTimeOffset(new DateTime(2050, 1, 1), TimeSpan.Zero),
				BlockedUserCapabilities);
			ValidationMessage = $"User {Model.AuthorUserName} has been blocked on {Model.Provider.ToLowerInvariant().Humanize(LetterCasing.Title)}";
		}
		
	}

}

