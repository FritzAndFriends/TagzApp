@page "/Waterfall"
@using Microsoft.AspNetCore.Components.Sections
@inject IJSRuntime JSRuntime
@inject IMessagingService MessagingService
@inject ApplicationConfiguration AppConfig
@layout Layout.WaterfallLayout
@* @rendermode InteractiveServer *@

<PageTitle>TagzApp - Waterfall Display</PageTitle>

<div style="height: 100vh; width: 100vw; margin: 0; overflow: hidden;">

	@if (UiState.FloatingHeader)
	{

		<div id="floatingHeader" class="scrollOut @_FloatingHeaderCssClass" @onmouseleave="OnHideFloatingHeader" @onclick="OnHideFloatingHeader">
			<TagzApp.Blazor.Components.Layout.Header />
		</div>

	}
	else
	{
		<TagzApp.Blazor.Components.Layout.Header />
	}

	<main role="main" class="pb-3" style="max-width: 100%">

		<div class="waterfallHeader">

			@((MarkupString)_WaterfallHeaderContent)

			<div id="headerButton" class="btn" @onclick="OnFloatingHeaderClick">
				<i class="bi bi-three-dots"></i>
			</div>


		</div>

		@if (MessagingService.TagsTracked.Any())
		{
			<Waterfall TagTracked="@MessagingService.TagsTracked.First()" />
		} else
		{
		@* HAL - output a DIV that is centered on the screen and report that no tags are being tracked*@
			<div class="d-flex justify-content-center align-items-center" style="height: 100vh; width: 100vw;">
			<div class="text-center">
				<h3 class="display-4">No Tags Tracked</h3>
				<p class="lead">Click the <i class="bi bi-three-dots"></i> button in the header to start tracking tags.</p>
			</div>
			</div>
		}

	</main>

	<div id="footerFade"></div>

</div>

@if (AppConfig.WaterfallHeaderCss is not null)
{
	<HeadContent>
		<style>
			@WaterfallHeaderCss
		</style>
</HeadContent>
}

@code {

	public UiState UiState { get; set; } = new UiState
		{
			FloatingHeader = true
		};

	private string _WaterfallHeaderContent;
	private string _FloatingHeaderCssClass = "";
	private bool _EnableHeaderScrollOut = false;

	protected override Task OnInitializedAsync()
	{

		// Convert markdown to HTML
		_WaterfallHeaderContent = Markdig.Markdown.ToHtml(AppConfig.WaterfallHeaderMarkdown);   // TODO: Get the AppConfig from the server

		UiState.UiUpdate += async (sender, args) =>
		{
			Console.WriteLine("UiUpdate updated");
			StateHasChanged();
		};

		return base.OnInitializedAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{

		await JSRuntime.InvokeVoidAsync("window.Masonry.setupPage");

		await base.OnAfterRenderAsync(firstRender);

	}

	void OnFloatingHeaderClick()
	{

		Task.Run(async () =>
		{

			await Task.Delay(TimeSpan.FromSeconds(3));
			_EnableHeaderScrollOut = true;

		});

		_FloatingHeaderCssClass = "scrollIn";

	}
	private void OnHideFloatingHeader(MouseEventArgs e)
	{

		if (_FloatingHeaderCssClass.Contains("scrollIn") && _EnableHeaderScrollOut)
		{
			_FloatingHeaderCssClass = "";
			_EnableHeaderScrollOut = false;
		}

	}

	public string WaterfallHeaderCss
	{
		get
		{
			var theCSS = AppConfig.WaterfallHeaderCss;
			if (string.IsNullOrWhiteSpace(theCSS))
			{
				return "";
			}

			var theRules = theCSS.Split('}', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
			var outCSS = new System.Text.StringBuilder();
			foreach (var rule in theRules)
			{

				if (!rule.StartsWith(".waterfallHeader"))
				{
					outCSS.Append(".waterfallHeader ");
				}

				rule.Replace(Environment.NewLine, "");
				outCSS.Append(rule);
				outCSS.Append("}");
				outCSS.Append(Environment.NewLine);

			}

			return outCSS.ToString();

		}
	}

}

