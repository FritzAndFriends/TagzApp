@page "/Moderation"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@* @layout Layout.WaterfallLayout *@
@using Microsoft.AspNetCore.Identity
@using TagzApp.ViewModels.Data
@using TagzApp.Blazor.Hubs
@using TagzApp.Blazor.Components.Account
@using Microsoft.EntityFrameworkCore
@implements IDisposable
@inject AuthenticationStateProvider AuthState
@inject IMessagingService MessagingService
@inject ModerationService ModerationService
@inject NavigationManager NavigationManager
@inject UserManager<TagzAppUser> UserMgr
@inject IJSRuntime JSRuntime

<PageTitle>Moderation</PageTitle>

<div class="row">
	<div class="col-md-12">
		<h1 class="text-center">Moderate Content for TagzApp (@(MessagingService.TagsTracked.Select(t => $"#{t}").FirstOrDefault() ?? ""))</h1>
	</div>
</div>

<div class="row" style="padding: 0  10px!important;">
	<div class="col-md-6 d-flex align-items-center" style="">
		<span class="col-form-label-sm">Current Moderators:</span>
		<span class="currentModerators">
			@foreach (var moderator in _Moderators)
			{
				<img id="moderator-@moderator.Email" 
					title="@moderator.DisplayName" 
					src="@moderator.AvatarImageSource" />
			}
		</span>
	</div>

	<div class="col-md-6 d-flex justify-content-end align-items-center">

		@* TODO: Add a badge with a number of currently blocked users *@
		<a class="link-danger me-3" title="Blocked Users" href="/BlockedUsers">
			<span id="blockedCount">
				@BlockedUserCount
			</span> <i class="bi bi-x-circle-fill"></i>
		</a>

		<label for="approved" style="text-wrap: nowrap; margin-right: 1.4em">Approval Status:</label>
		<select id="approved">
			<option value="-1">All</option>
			<option value="1">Approved Only</option>
			<option value="2">Rejected Only</option>
			<option value="0">Needs Review</option>
		</select>

		<label for="providers" class="px-2">Providers:</label>
		<div class="btn-group" role="group">

			@foreach (var provider in MessagingService.Providers)
			{
				<input type="checkbox" class="btn-check" name="options" id="@provider.Id" checked autocomplete="off">
				<label title="@provider.DisplayName" class="btn btn-outline-primary providerSwitch" for="@provider.Id"><i class="provider bi @WaterfallMessage.MapProviderToIcon(provider.Id)"></i></label>
			}

		</div>

	</div>

</div>
<div class="row" style="padding: 2px 10px!important">

	<div id="taggedContent" class="">

	@foreach (var content in _Content.Values.Reverse())
	{
		<ModerationMessage Content="content" />
	}

	</div>

	<PauseButton @ref="ThePauseButton" />

	<div id="moderationAction" style="display: none;">
		<i class="bi bi-check2 approve" title="Approve this content"></i>
		<i class="bi bi-x-circle-fill reject" title="Reject this content"></i>
		<i class="bi bi-journal-text more" title="More Actions"></i>
	</div>

</div>

@*

	section Scripts {

		<script src="~/js/masonry.js" asp-append-version="true"></script>
		<script src="~/lib/sweetalert/dist/sweetalert.min.js"></script>
		<script>

			window.TagzApp.ListenForModerationContent("@Model.Tags.FirstOrDefault()");

			window.TagzApp.ActivateKeyboardNavigation();

			window.onload = window.Masonry.resizeAllGridItems();
			window.addEventListener("resize", Masonry.resizeAllGridItems);

			var providers = [];
			var switches = document.querySelectorAll(".providerSwitch");
			switches.forEach(function (sw) {
				var providerId = sw.getAttribute("for");
				var providerClass = window.TagzApp.MapProviderToIconClass(providerId);
				var icon = sw.querySelector(".provider");
				icon.classList.add(providerClass);
				providers.push(providerId);
				// add an event handler on the toggle of the checkbox to call AddProviderFilter or RemoveProviderFilter appropriately
				var checkbox = document.getElementById(providerId);
				checkbox.addEventListener("click", function (e) {
					var providerId = e.target.id;
					window.TagzApp.ToggleProviderFilter(providerId);
				});
			});
			window.TagzApp.InitializeProviderFilter(providers);

			var approved = document.getElementById("approved");
			approved.addEventListener("change", function (e) {
				var value = e.target.value;
				window.TagzApp.FilterByApprovalStatus(value);
			});

		</script>

	}
*@

@code {

	public int BlockedUserCount { get; set; } = 0;

	public PauseButton ThePauseButton { get; set; } = new();

	private SortedList<DateTimeOffset, TagzApp.ViewModels.Data.ModerationContentModel> _Content = new();

	private HashSet<dynamic> _PauseQueue = new();

	private HashSet<NewModerator> _Moderators = new();

	string _Tag = string.Empty;

	TagzAppUser _User = null!;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{

		NavigationManager.LocationChanged += (_, args) =>
		{
			JSRuntime.InvokeVoidAsync("StopHeartbeat");
		};

		BlockedUserCount = ModerationService.BlockedUserCount;

		_Tag = MessagingService.TagsTracked.FirstOrDefault();

		_Moderators = ModerationService.Moderators.ToHashSet();

		await ListenForModerationContent();


		var userName = await AuthState.GetAuthenticationStateAsync();
		_User = await UserMgr.GetUserAsync(userName.User);

		ModerationService.AddModerator(_User.UserName, _User.DisplayName);

		await base.OnInitializedAsync();

		await InitializeContent();

	}

	protected override async Task OnParametersSetAsync()
	{


	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{

		if (firstRender && _User is not null)
		{
			JSRuntime.InvokeVoidAsync($"Heartbeat", _User.UserName);
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	async Task ListenForModerationContent()
	{

		ModerationService.OnNewModerator += OnNewModerator;

		ModerationService.OnDepartModerator += OnDepartModerator;

		ModerationService.OnNewContent += OnNewContent;

		/* _Connection = new HubConnectionBuilder()
		// 	.WithUrl(NavigationManager.ToAbsoluteUri($"/mod?t={_Tag}"))
		// 	.WithAutomaticReconnect()
		// 	.Build();

		// _Connection.On<ContentModel>("NewWaterfallMessage", (content) =>
		// {
		// 	if (ThePauseButton.IsPaused)
		// 	{
		// 		_PauseQueue.Add(content);
		// 		return;
		// 	}

		// 	_Content.Add(content.Timestamp, ModerationContentModel.ToModerationContentModel(content));
		// });

		// _Connection.On<ModerationContentModel>("NewApprovedMessage", HandleApprovedMessage);

		// _Connection.On<ModerationContentModel>("NewRejectedMessage", (content) => {
		// 	if (!ThePauseButton.IsPaused) {
		// 		// TODO: Write this method
		// 		//RejectMessage(content);
		// 	} else {

		// 		var existing = _PauseQueue.FirstOrDefault(p => p is ContentModel && p.ProviderId == content.ProviderId);
		// 		if (existing is not null)
		// 		{
		// 			_PauseQueue.Remove(existing);
		// 		}

		// 		_PauseQueue.Add(content);
		// 	}
		// });

		// _Connection.On<int>("NewBlockedUserCount", (newCount) => {
		// 	BlockedUserCount = newCount;
		// 	StateHasChanged();
		// });

		// _Connection.On<NewModerator>("NewModerator", (moderator) => {
		// 	_Moderators.Add(moderator);
		// });

		// _Connection.On<string>("RemoveModerator", (moderatorEmail) => {
		// 	var thisMod = _Moderators.FirstOrDefault(m => m.Email.Equals(moderatorEmail, StringComparison.InvariantCultureIgnoreCase));
		// 	if (thisMod is not null)
		// 	{
		// 		_Moderators.Remove(thisMod);
		// 	}	
		// });

			await _Connection.StartAsync();
			*/
	}

	void HandleApprovedMessage(ModerationContentModel content)
	{
		if (!ThePauseButton.IsPaused)
		{
			// TODO: Approve the message
			//ApproveMessage(content);
		}
		else
		{
			// Find item in the pauseQueue and set its state to ModerationState.Approved
			var existing = _PauseQueue.FirstOrDefault(p => p is ContentModel && p.ProviderId == content.ProviderId);
			if (existing is not null)
			{
				_PauseQueue.Remove(existing);
			}

			_PauseQueue.Add(content);

		}
	}

	async Task InitializeContent()
	{

		var currentContent = (await MessagingService.GetContentByTagForModeration(_Tag))
			.Select(c => ModerationContentModel.ToModerationContentModel(c.Item1, c.Item2))
			.ToArray();

		foreach (var content in currentContent)
		{
			_Content.Add(content.Timestamp, content);
		}

	}

	async void OnNewModerator(object? sender, ModeratorArgs args)
	{
		_Moderators.Add(new NewModerator(args.Email, args.Avatar.ToString(), args.DisplayName));
		Console.WriteLine($"New moderator received {args.DisplayName}");
		await InvokeAsync(StateHasChanged);
		Console.WriteLine("Updating moderator list");
	}

	async void OnDepartModerator(object? sender, ModeratorArgs args)
	{
		Console.WriteLine($"Removing moderator {args.DisplayName}");
		var thisMod = _Moderators.FirstOrDefault(m => m.Email.Equals(args.Email, StringComparison.InvariantCultureIgnoreCase));
		if (thisMod is not null)
		{
			_Moderators.Remove(thisMod);
		}
		Console.WriteLine("Moderator departed");
		await InvokeAsync(StateHasChanged);
	}

	async void OnNewContent(object? sender, NewContentArgs args)
	{

		_Content.Add(args.Content.Timestamp, ModerationContentModel.ToModerationContentModel(args.Content));
		await InvokeAsync(StateHasChanged);

	}

	public void Dispose()
	{

		if (ModerationService is not null)
		{
			ModerationService.OnNewModerator -= OnNewModerator;
			ModerationService.OnDepartModerator -= OnDepartModerator;
			ModerationService.OnNewContent -= OnNewContent;
		}

		// Console.WriteLine($">> Disposing Moderation.razor for user {_User?.UserName}");
		// if (_User is not null) ModerationService?.RemoveModerator(_User.UserName);

	}

}
