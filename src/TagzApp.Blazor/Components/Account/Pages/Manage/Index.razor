@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@inject UserManager<TagzAppUser> UserManager
@inject SignInManager<TagzAppUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
	<div class="col-md-6">
		<EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" role="alert" />
			<div class="form-floating mb-3">
				<input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
				<label for="username" class="form-label">Username</label>
			</div>
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.DisplayName" class="form-control" placeholder="Please enter your display name." />
				<label for="display-name" class="form-label">Display Name</label>
				<ValidationMessage For="() => Input.DisplayName" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
				<label for="phone-number" class="form-label">Phone number</label>
				<ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
			</div>
			<button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
		</EditForm>
	</div>
</div>

@code {
	private TagzAppUser user = default!;
	private string? username;
	private string? phoneNumber;
	private string? displayName;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		user = await UserManager.FindByNameAsync(HttpContext.User.Identity.Name);

		username = user.UserName;
		phoneNumber = user.PhoneNumber;
		displayName = user.DisplayName;


		Input.PhoneNumber ??= phoneNumber;
		Input.DisplayName ??= displayName;
	}

	private async Task OnValidSubmitAsync()
	{
		if (Input.PhoneNumber != phoneNumber)
		{
			var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
			if (!setPhoneResult.Succeeded)
			{
				RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
			}
		}

		if (Input.DisplayName != displayName)
		{
			user.DisplayName = Input.DisplayName;
			var setDisplayNameResult = await UserManager.UpdateAsync(user);
			if (!setDisplayNameResult.Succeeded)
			{
				RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set display name.", HttpContext);
			}

			// Set the DisplayName claim for this user
			if ((await UserManager.GetClaimsAsync(user)).Any(c => c.Type == "DisplayName"))
			{
				var removeDisplayNameClaimResult = await UserManager.ReplaceClaimAsync(user, new Claim("DisplayName", displayName), new Claim("DisplayName", Input.DisplayName));
			} else {
				var setDisplayNameClaimResult = await UserManager.AddClaimAsync(user, new Claim("DisplayName", Input.DisplayName));
			}

		}

		await SignInManager.RefreshSignInAsync(user);
		RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
	}

	private sealed class InputModel
	{
		[Phone]
		[Display(Name = "Phone number")]
		public string? PhoneNumber { get; set; }

		[Display(Name = "Display name")]
		public string? DisplayName { get; set; }

	}
}
