@using System.Diagnostics
@using TagzApp.Blazor.Client.Services
@using TagzApp.Blazor.Client.Bootstrap
@inject ToastService ToastService
@inject IJSRuntime JSRuntime
@implements IErrorBoundary
@implements IDisposable

@if (CurrentException is not null)
{
    <div class="custom-error-boundary">
        <div class="custom-error-card">
            <div class="error-header">
                <i class="bi bi-exclamation-triangle-fill error-icon"></i>
                <h3 class="error-title">Oops! Something went wrong</h3>
            </div>
            
            <div class="error-body">
                <p class="error-message">
                    We're sorry, but an unexpected error has occurred. Our team has been notified and is working on a fix.
                </p>
                
                @if (ShowDetails)
                {
                    <div class="error-details">
                        <h4>Error Details:</h4>
                        <div class="error-details-content">
                            <strong>Type:</strong> @CurrentException.GetType().Name<br />
                            <strong>Message:</strong> @CurrentException.Message
                            @if (!string.IsNullOrEmpty(RequestId))
                            {
                                <br /><strong>Request ID:</strong> <code>@RequestId</code>
                            }
                        </div>
                    </div>
                }
            </div>
            
            <div class="error-actions">
                <button class="btn btn-primary error-btn" @onclick="RefreshPage">
                    <i class="bi bi-arrow-clockwise me-2"></i>
                    Refresh Page
                </button>
                <button class="btn btn-outline-secondary error-btn" @onclick="ToggleDetails">
                    <i class="bi bi-info-circle me-2"></i>
                    @(ShowDetails ? "Hide" : "Show") Details
                </button>
                <button class="btn btn-outline-secondary error-btn" @onclick="RecoverContent">
                    <i class="bi bi-arrow-return-left me-2"></i>
                    Try to Continue
                </button>
            </div>
        </div>
    </div>
}
else
{
    @ChildContent
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public int MaximumErrorCount { get; set; } = 100;
    [CascadingParameter] private HttpContext? HttpContext { get; set; }

    public Exception? CurrentException { get; private set; }

    private int _errorCount;
    private bool ShowDetails { get; set; } = false;
    private string? RequestId { get; set; }

    protected override void OnInitialized()
    {
        RequestId = Activity.Current?.Id ?? HttpContext?.TraceIdentifier;
    }

    public async Task ProcessErrorAsync(Exception exception)
    {
        _errorCount++;
        CurrentException = exception;

        // Log the error (you might want to integrate with your logging system)
        Console.WriteLine($"Error boundary caught exception: {exception}");

        // Show a toast for less severe errors or if we haven't hit the error limit
        if (_errorCount <= 3)
        {
            ToastService.Add("An error occurred, but the application is attempting to recover.", MessageSeverity.Warning);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshPage()
    {
        await JSRuntime.InvokeVoidAsync("location.reload");
    }

    private void ToggleDetails()
    {
        ShowDetails = !ShowDetails;
        StateHasChanged();
    }

    private void RecoverContent()
    {
        CurrentException = null;
        _errorCount = 0;
        ShowDetails = false;
        StateHasChanged();
        
        ToastService.Add("Attempting to recover. If problems persist, please refresh the page.", MessageSeverity.Info);
    }

    public void Recover()
    {
        CurrentException = null;
        _errorCount = 0;
        ShowDetails = false;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}

<style>
    .custom-error-boundary {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        backdrop-filter: blur(4px);
    }

    .custom-error-card {
        background-color: var(--bs-body-bg);
        border: 1px solid var(--bs-border-color);
        border-radius: 20px;
        padding: 2rem;
        max-width: 600px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0px 8px 32px rgba(0, 0, 0, 0.3);
        text-align: center;
    }

    .error-header {
        margin-bottom: 1.5rem;
    }

    .error-icon {
        font-size: 3rem;
        color: var(--bs-warning);
        margin-bottom: 1rem;
        display: block;
    }

    .error-title {
        color: var(--bs-body-color);
        margin-bottom: 0;
        font-weight: 600;
    }

    .error-body {
        margin-bottom: 1.5rem;
        text-align: left;
    }

    .error-message {
        font-size: 1.1rem;
        margin-bottom: 1rem;
        text-align: center;
        color: var(--bs-body-color);
    }

    .error-details {
        background-color: var(--bs-gray-100);
        border-radius: 8px;
        padding: 1rem;
        margin-top: 1rem;
        border: 1px solid var(--bs-border-color);
    }

    .error-details h4 {
        margin-bottom: 0.75rem;
        font-size: 1rem;
        font-weight: 600;
    }

    .error-details-content {
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
        word-break: break-word;
        line-height: 1.4;
    }

    .error-actions {
        display: flex;
        gap: 0.75rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    .error-btn {
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: 500;
        white-space: nowrap;
    }

    @media (max-width: 768px) {
        .custom-error-card {
            margin: 1rem;
            padding: 1.5rem;
        }

        .error-actions {
            flex-direction: column;
        }

        .error-btn {
            width: 100%;
        }
    }

    /* Dark theme adjustments */
    @media (prefers-color-scheme: dark) {
        .error-details {
            background-color: var(--bs-gray-800);
        }
    }
</style>