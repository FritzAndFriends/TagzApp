@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject IAuthorizationService AuthorizationService

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
		@if ((await AuthorizationService.AuthorizeAsync(User, Security.Policy.AdminRoleOnly)).Succeeded)
		{

			<li class="nav-item">
				<a id="admin" class="nav-link text-dark" asp-area="Admin" asp-page="/Index" title="Admin">Admin</a>
			</li>

		}

		<li class="nav-item">
			<a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
		</li>
		<li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark border-0">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
