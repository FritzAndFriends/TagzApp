@page
@using TagzApp.Web.Areas.Admin.Pages;
@using TagzApp.Web.Services;
@model TagzApp.Web.Areas.Admin.Pages.ProvidersModel
@inject ViewModelUtilitiesService vmUtilities

@{
	ViewData["ActivePage"] = ManageNavPages.Providers;
}

<h2>Provider Management</h2>

<article class="mt-3">
	@foreach (var provider in Model.Providers.OrderBy(p => p.DisplayName))
	{
		var health = await provider.GetHealth();

		var config = await provider.GetConfiguration(ConfigureTagzAppFactory.Current);
		var properties = vmUtilities.LoadViewModel(provider.DllName);

		<div class="accordion" id="providerAccordion">
			<div class="accordion-item">
				<h3 class="accordion-header" id="heading-@provider.Id">
					<button class="accordion-button collapsed"
									type="button"
									data-bs-toggle="collapse"
									data-bs-target="#@provider.Id"
									aria-expanded="false"
									aria-controls="@provider.Id">
						<i class="@ProvidersModel.GetClassForHealth(health.Status)" title="@health.Message"></i>
						<i class="bi bi-@provider.Id.ToLower()"></i>
						@provider.DisplayName


					</button>
				</h3>
				<div id="@provider.Id"
						 class="accordion-collapse collapse"
						 aria-labelledby="heading-@provider.Id"
						 data-bs-parent="#providerAccordion">
					<p class="ps-3 pt-3 mb-1">@provider.Description</p>
					<p class="ps-3 pt-3 mb-1"><b>Status:</b> @health.Status - @health.Message</p>
					<p class="ps-3 pt-3 mb-0 fst-italic">Please fill in the configuration values below:</p>
					<form method="post" class="p-3" id="@($"{provider.Id}-form")">
						<input type="hidden" id="Name" name="Name" value="@provider.DisplayName" />
						@foreach (var property in properties ?? new System.Reflection.PropertyInfo[0])
						{
							var displayName = vmUtilities.GetDisplayName(property);
							displayName = string.IsNullOrWhiteSpace(displayName) ? property.Name : displayName;

							var inputType = vmUtilities.GetInputType(property).ToLowerInvariant();
							inputType = string.IsNullOrEmpty(inputType) ? "text" : inputType;
							

							if (inputType == "text") {
								inputType = ProvidersModel.PasswordEndings.Any(e => property.Name.EndsWith(e, StringComparison.InvariantCultureIgnoreCase)) ? "password" : "text";
							}

							var pattern = inputType == "url" ? "https://.*" : string.Empty;
							pattern = inputType == "timeout" ? "\\d{2}:\\d{2}:\\d{2}" : pattern;


							var propertyValue = config?.GetConfigurationByKey(property.Name);

							if (inputType == "url" || inputType == "timeout")
							{
								<label for="@property.Name" class="form-label">@displayName</label>
								<input name="@property.Name"
											 class="form-control"
											 type="@inputType"
											 pattern="@pattern"
											 value="@(propertyValue ?? string.Empty)" />
							}
							else
							{
								switch (property.PropertyType)
								{
									case Type _ when typeof(string).IsAssignableFrom(property.PropertyType):
										<label for="@property.Name" class="form-label">@displayName</label>
										<input name="@property.Name" type="@inputType" class="form-control" value="@(propertyValue ?? string.Empty)" />
										break;
									case Type _ when typeof(bool).IsAssignableFrom(property.PropertyType):
										<div class="input-group pt-3">
											@if (property.Name == nameof(IProviderConfiguration.Enabled))
											{
												// Special handling for the Enabled Boolean property
												propertyValue = config!.Enabled.ToString();

												<div class="form-check">
													<label for="@property.Name" class="form-check-label">@displayName</label>
													<input type="checkbox"
																 class="form-check-input"
																 id="@property.Name"
																 name="@property.Name"
																 checked="@(!propertyValue.Equals("false", StringComparison.InvariantCultureIgnoreCase))" />
													@if (config == null || (!config?.Enabled ?? false))
													{
														<div id="@property.Name" class="form-text text-danger">
															Toggling this will enable the provider. Please validate provider code for security concerns prior to activation!
														</div>
													}
												</div>
											}
											else
											{
												// Configuration property handling of String/Boolean and checkbox value conversions
												propertyValue = config?.GetConfigurationByKey(property.Name);
												var checkedValue = string.IsNullOrEmpty(propertyValue) ? false : bool.Parse(propertyValue);
												<div class="form-check">
													<label for="@property.Name" class="form-check-label">@displayName</label>
													@if (!checkedValue)
													{
														<input type="checkbox" class="form-check-input" data-val=" true" data-val-required="Field is required." id="@property.Name" name="@property.Name" value="true">
													}
													else
													{
														<input type="checkbox" class="form-check-input" data-val="true" data-val-required="Field is required." id="@property.Name" name="@property.Name" value="true" checked>
													}
													<input name="@property.Name" type="hidden" value="false">
												</div>
											}
										</div>
										break;
								}
							}
						}
						<button type="submit" class="btn btn-primary mt-3">Save</button>
					</form>
				</div>
			</div>
		</div>
	}
</article>